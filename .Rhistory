library(xaringanExtra)
embed_xaringan(url = "docs/slides.html")
knitr::include_url("https://jonhlynsson.github.io/PSMT58-Research-Methods/slides.html")
options(htmltools.dir.version = FALSE)
library(kableExtra)
knitr::opts_chunk$set(
# fig.width=9, fig.height=6, fig.retina=3, dpi = 150,
# out.width = "150%",
cache = FALSE,
echo = TRUE,
message = FALSE,
warning = FALSE,
hiline = TRUE
)
library(xaringanthemer)
style_duo_accent(
primary_color = "#1381B0",
secondary_color = "#FF961C",
inverse_header_color = "#FFFFFF",
inverse_background_color = "#4c516d"
)
## clean the environment -----
rm(list = ls(all=T)) # remove all variables (all=T takes care of hidden objects)
graphics.off() # turn off plots
cat("\014") # clear the console
## ----
# stim ->	Stimulus Number
# sent ->	Sentence: 1 = Death, 0 = Life
# race -> Race: 1 = White, -1 = Black
# glasses ->	Glasses: 1 = Yes, 0 = No
# tattoos ->	Tattoos: 1 = Yes, 0 = No
# trust ->	Trustworthiness (scale 1-8)
# trust_2nd ->	Trustworthiness ratings with 2nd control group; Death targets are same as in primary analysis, Life targets are different
# afro ->	raw Afrocentricity ratings
# zAfro ->	Afrocentricity ratings normalized within target race. Analyses in paper were done with this variable
# attract ->	Attractiveness
# fWHR ->	facial width-to-height
# zfWHR ->	fWHR normalized within target race. Analyses in paper were done with this variable
# maturity ->	Maturity
# DCNum	-> ID number in Department of Corrections database
# DCNum_MatchedControl ->	ID number in DoC database for 2nd control group. Only rated on trustworthiness (Trust2). All DC numbers for death are same as in DCNum variable, only Life controls are unique
## The seed was NOT set any random variables  ----
## The variables used in the result section ------------------------------------
# sent - DV
# trust - IV
# zAfro - IV
# attract - IV
# maturity - IV
# zfWHR - IV
# glasses - IV
# tattoos - IV
## -----------------------------------------------------------------------------
## set working directory ----
setwd("~/Stockholm University/semster 1/Research methods/Group assignment/Data")
# Packages used ----------------------------------------------------------------
library(tidyverse)
library(ggpubr) # for creating easily publication ready plots
library(rstanarm) # For Bayesian analysis
## -----------------------------------------------------------------------------
## Read in data ----
d_full <- read.table("Study1_Data_Hand_In.txt", header = TRUE, sep = ";")
## select the relevant variables to replicate study 1 ----
d <- d_full[, c("race", "sent", "trust", "zAfro", "attract", "maturity", "zfWHR", "glasses", "tattoos")]
## initial data screening ----
str(d) # the structure of the dataset indicates that variables need re-coding:
# sent needs to be a factor
# glasses needs to be a factor
# tattoos needs to be a factor
# race needs to be a factor
# Re-code variables
d$sent <- factor(d$sent, labels = c("Life", "Death"))
d$race <- factor(d$race, labels = c("Black", "White"))
d$glasses <- factor(d$glasses, labels = c("No_Glasses", "Yes_Glasses"))
d$tattoos <- factor(d$tattoos, labels = c("No_Tattoos", "Yes_Tattoos"))
str(d)
## ---------
library(ggpubr)
# do an effects plot
g <- ggline(data = d,
x = "sent",
y = "trust",
color = "race",
add = c("mean_se"),
ggtheme = theme_pubclean(),
xlab = "Type of sentence",
ylab = "Trustworthiness",
legend.title = "Race")
g + theme_xaringan(title_font_size = 18, text_font_size = 14, ) +
ggplot2::ggtitle("Interaction plot", subtitle = "(1 = not at all trustworthy, 8 = very trustworthy)")
## Now let's do the logistic regression ----
# turn off factors for DV
sent_new <- as.numeric(d$sent)
sent_new <- sent_new - 1
summary(sent_new) # sanity check - to check if it worked
## model 1
glm1 <- glm(formula = sent ~ trust, data = d, family = binomial(link = "logit"))
summary(glm1)
# Use exp function to get the odds ratio and confinit for CI - use cbind to
# display  both together
model_1_stats <- exp(cbind(OR = (coef(glm1)), confint(glm1, level = 0.95)))
model_1_stats
##  Bayesian analysis for model 1 - this is not used in the presentation and is done to further our own understanding of the data
B_glm1 <- stan_glm(formula = sent ~ trust, data = d, family = "binomial",
refresh = F, seed = 123)
summary(B_glm1)
# Use exp function to get the odds ratio and posterior_interval for CI - use
# cbind to display both together
model_1_Bays_stats <- exp(cbind(OR = coef(B_glm1), posterior_interval(B_glm1)))
kable(model_1_stats, caption = "model 1") %>% kable_styling(html_font = "Times", full_width = F)
## Model 2 -----
glm2 <- glm(sent ~ trust +
zAfro +
attract +
maturity +
zfWHR +
glasses +
tattoos,
data = d,
family = binomial(link = "logit"))
summary(glm2) # not exactly the same results but close:
#               afro IS supposed to be significant
#             - note: we do not care for significance persay
#                     this note is only here to show that we
#                     looked at the data and thought about
#                     it!
model_2_stats <- exp(cbind(OR = coef(glm2), confint(glm2))) #
model_2_stats
Models <- rbind(Model_1 = model_1_stats, Model_2 = model_2_stats) # bind stats for model 1 & 2
# give rows meaningful names
row.names(Models) <- c("(Intercept)", "Trustworthiness", "(Intercept)", "Trustworthiness",
"Afrocentricity", "Attractiveness", "Maturity",
"Facial width-to-height ratio (fWHR)",
"Presence of glasses", "Presence of tattoos")
# Print the models
Models %>% kable(digits = 2, align = c("l", "c", "c", "c"), format = "html") %>%
kable_classic_2(html_font = "Times") %>%
kable_styling(html_font = "Times", full_width = T, position = "left",
fixed_thead = F) %>%
kableExtra::group_rows(group_label = "Model 1", 1, 2) %>%
kableExtra::group_rows(group_label = "Model 2", 3, 10)
library(DiagrammeR)
# this was an attempt to to a flow chart in R - it failed
grViz(diagram = "digraph flowchart {
node [fontname = times, shape = oval]
tab1 [label = '@@1']
tab2 [label = '@@2']
tab3 [label = '@@3']
tab1 -> tab2 -> tab3;
}
[1]: 'Selection of raters (N = 42)'
[2]: 'Raters judge 742 inmates on trustworthiness'
[3]: 'Statistics vs Mathematics Knowledge'
")
grViz(diagram = "digraph flowchart {
# define node aesthetics
node [fontname = times, shape = oval, color = Lavender, style = filled]
tab1 [label = '@@1']
tab2 [label = '@@2']
tab3 [label = '@@3']
tab4 [label = '@@4']
# set up node layout
tab1 -> tab2;
tab2 -> tab3;
tab2 -> tab4
}
[1]: 'Selection of raters (N = 42)'
[2]: 'Raters judge 742 inmates on trustworthiness'
[3]: 'Life sentence'
[4]: 'Death sentence'
")
# to render rmarkdown::render(input = "Group assignment-EDIT3.Rmd")
# rmarkdown::render(input = "Group assignment-EDIT-Again-25-dec.Rmd")
kable(model_1_stats, caption = "model 1") %>% kable_styling(html_font = "Times", full_width = F)
# Print the models
Models %>% kable(digits = 2, align = c("l", "c", "c", "c"), format = "html",
caption = "Table 1. Odds ratios and compatibility intervals from the logistic regression models",
table.attr = "style='width:30%;'") %>%
kable_classic_2(html_font = "Times") %>%
kable_styling(html_font = "Times", full_width = F, position = "left",
fixed_thead = F) %>%
kableExtra::group_rows(group_label = "Model 1", 1, 2) %>%
kableExtra::group_rows(group_label = "Model 2", 3, 10)
# Print the models
Models %>% kable(digits = 2, align = c("l", "c", "c", "c"), format = "html",
caption = "Table 1. Odds ratios and compatibility intervals from the logistic regression models",
table.attr = "style='width:30%;'") %>%
kable_classic_2(html_font = "Times") %>%
kable_styling(html_font = "Times", full_width = F, position = "left",
fixed_thead = F, font_size = 7) %>%
kableExtra::group_rows(group_label = "Model 1", 1, 2) %>%
kableExtra::group_rows(group_label = "Model 2", 3, 10)
# Print the models
Models %>% kable(digits = 2, align = c("l", "c", "c", "c"), format = "html",
caption = "Table 1. Odds ratios and compatibility intervals from the logistic regression models",
table.attr = "style='width:30%;'") %>%
kable_classic_2(html_font = "Times") %>%
kable_styling(html_font = "Times", full_width = F, position = "left",
fixed_thead = F,
font_size = 9
) %>%
kableExtra::group_rows(group_label = "Model 1", 1, 2) %>%
kableExtra::group_rows(group_label = "Model 2", 3, 10)
# Print the models
Models %>% kable(digits = 2, align = c("l", "c", "c", "c"), format = "html",
caption = "Table 1. Odds ratios and compatibility intervals from the logistic regression models",
# table.attr = "style='width:30%;'"
) %>%
kable_classic_2(html_font = "Times") %>%
kable_styling(html_font = "Times", full_width = F, position = "left",
fixed_thead = F,
font_size = 14
) %>%
kableExtra::group_rows(group_label = "Model 1", 1, 2) %>%
kableExtra::group_rows(group_label = "Model 2", 3, 10)
